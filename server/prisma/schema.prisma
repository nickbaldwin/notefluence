// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  bio       String?
  isActive  Boolean  @default(true)
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects     Project[]     @relation("ProjectOwner")
  memberships  ProjectMember[]
  comments     Comment[]
  activities   Activity[]
  sessions     Session[]
  notifications Notification[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  slug        String   @unique
  isPublic    Boolean  @default(false)
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId     String
  owner       User           @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  pages       Page[]
  files       File[]
  activities  Activity[]

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  role      Role     @default(VIEWER)
  joinedAt  DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

model Page {
  id          String   @id @default(cuid())
  title       String
  slug        String
  content     Json     // Array of cells (markdown, code, etc.)
  order       Int      @default(0)
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parentId    String?
  parent      Page?    @relation("PageHierarchy", fields: [parentId], references: [id])
  children    Page[]   @relation("PageHierarchy")
  comments    Comment[]
  activities  Activity[]
  versions    PageVersion[]

  @@unique([projectId, slug])
  @@map("pages")
}

model PageVersion {
  id        String   @id @default(cuid())
  content   Json
  version   Int
  createdAt DateTime @default(now())

  // Relations
  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("page_versions")
}

model Cell {
  id        String   @id @default(cuid())
  type      CellType
  content   String
  output    String?
  metadata  Json?
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("cells")
}

model File {
  id          String   @id @default(cuid())
  name        String
  originalName String
  mimeType    String
  size        Int
  url         String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedById String
  uploadedBy  User     @relation(fields: [uploadedById], references: [id])

  @@map("files")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  metadata  Json?
  createdAt DateTime     @default(now())

  // Relations
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  pageId    String?
  page      Page?        @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  metadata  Json?
  createdAt DateTime         @default(now())

  // Relations
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum Role {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

enum CellType {
  MARKDOWN
  CODE
  OUTPUT
  IMAGE
  CHART
}

enum ActivityType {
  PROJECT_CREATED
  PROJECT_UPDATED
  PAGE_CREATED
  PAGE_UPDATED
  PAGE_DELETED
  COMMENT_ADDED
  FILE_UPLOADED
  MEMBER_ADDED
  MEMBER_REMOVED
}

enum NotificationType {
  PROJECT_INVITE
  COMMENT_MENTION
  PAGE_UPDATE
  SYSTEM_MESSAGE
}
